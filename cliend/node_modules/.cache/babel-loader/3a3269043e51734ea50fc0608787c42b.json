{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Axios from '../Axios';\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await Axios.get('/cart').then(res => res.data);\n  return response;\n});\nexport const CartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cartInfo: [],\n    error: '',\n    total: 0\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      console.log(action.payload);\n      state.cartInfo.push(action.payload);\n    },\n    changeProductQuantity: (state, action) => {\n      console.log(\"redux\", action.payload);\n      state.cartInfo.find(itme => itme.id === action.payload.id).quantity += action.payload.quantit;\n    },\n    removeFromCart: (state, action) => {\n      state.cartInfo.splice(state.cartInfo.findIndex(itme => itme.id === action.payload.id), 1);\n    }\n  },\n  extraReducers: {\n    [fetchCart.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [fetchCart.fulfilled]: (state, action) => {\n      state.cartInfo = action.payload.cart;\n      state.totle = action.payload.totleamout;\n      state.loading = false;\n    },\n    [fetchCart.rejected]: (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  addToCart,\n  changeProductQuantity,\n  removeFromCart\n} = CartSlice.actions;\nexport default CartSlice.reducer;","map":{"version":3,"sources":["/home/frboy/whyshop/cliend/src/Features/Cart.js"],"names":["createSlice","createAsyncThunk","Axios","fetchCart","response","get","then","res","data","CartSlice","name","initialState","cartInfo","error","total","reducers","addToCart","state","action","console","log","payload","push","changeProductQuantity","find","itme","id","quantity","quantit","removeFromCart","splice","findIndex","extraReducers","pending","loading","fulfilled","cart","totle","totleamout","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAIA,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CAAC,gBAAD,EAAmB,YAAY;AACpE,QAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,OAAV,EAAmBC,IAAnB,CAAwBC,GAAG,IAAIA,GAAG,CAACC,IAAnC,CAAvB;AACA,SAAOJ,QAAP;AACH,CAHwC,CAAlC;AAKP,OAAO,MAAMK,SAAS,GAAGT,WAAW,CAAC;AACjCU,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,KAAK,EAAC,EAFI;AAGVC,IAAAA,KAAK,EAAC;AAHI,GAFmB;AAOjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB;AACAJ,MAAAA,KAAK,CAACL,QAAN,CAAeU,IAAf,CAAoBJ,MAAM,CAACG,OAA3B;AACH,KAJK;AAKNE,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,MAAM,CAACG,OAA3B;AACAJ,MAAAA,KAAK,CAACL,QAAN,CAAeY,IAAf,CAAoBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACG,OAAP,CAAeK,EAAvD,EAA2DC,QAA3D,IAAuET,MAAM,CAACG,OAAP,CAAeO,OAAtF;AACH,KARK;AASNC,IAAAA,cAAc,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACL,QAAN,CAAekB,MAAf,CAAsBb,KAAK,CAACL,QAAN,CAAemB,SAAf,CAAyBN,IAAI,IAAGA,IAAI,CAACC,EAAL,KAAUR,MAAM,CAACG,OAAP,CAAeK,EAAzD,CAAtB,EAAmF,CAAnF;AACH;AAXK,GAPuB;AAoBjCM,EAAAA,aAAa,EAAE;AACX,KAAC7B,SAAS,CAAC8B,OAAX,GAAqB,CAAChB,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACiB,OAAN,GAAgB,IAAhB;AACH,KAHU;AAKX,KAAC/B,SAAS,CAACgC,SAAX,GAAuB,CAAClB,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAACL,QAAN,GAAiBM,MAAM,CAACG,OAAP,CAAee,IAAhC;AACAnB,MAAAA,KAAK,CAACoB,KAAN,GAAYnB,MAAM,CAACG,OAAP,CAAeiB,UAA3B;AACArB,MAAAA,KAAK,CAACiB,OAAN,GAAgB,KAAhB;AACH,KATU;AAWX,KAAC/B,SAAS,CAACoC,QAAX,GAAsB,CAACtB,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACL,KAArB;AACAI,MAAAA,KAAK,CAACiB,OAAN,GAAgB,KAAhB;AACH;AAdU;AApBkB,CAAD,CAA7B;AAqCP,OAAO,MAAM;AAAElB,EAAAA,SAAF;AAAYO,EAAAA,qBAAZ;AAAkCM,EAAAA;AAAlC,IAAoDpB,SAAS,CAAC+B,OAApE;AACP,eAAe/B,SAAS,CAACgC,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport Axios from '../Axios'\n\n\n\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n    const response = await Axios.get('/cart').then(res => res.data)\n    return response\n}\n)\nexport const CartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        cartInfo: [],\n        error:'',\n        total:0,\n    },\n    reducers: {\n        addToCart: (state, action) => {\n            console.log(action.payload)\n            state.cartInfo.push(action.payload)\n        },\n        changeProductQuantity: (state, action) => {\n            console.log(\"redux\",action.payload)\n            state.cartInfo.find(itme => itme.id === action.payload.id).quantity += action.payload.quantit\n        },\n        removeFromCart: (state, action) => {\n            state.cartInfo.splice(state.cartInfo.findIndex(itme=> itme.id===action.payload.id),1)\n        }\n    },\n    extraReducers: {\n        [fetchCart.pending]: (state, action) => {\n            state.loading = true\n        }\n        ,\n        [fetchCart.fulfilled]: (state, action) => {\n            state.cartInfo = action.payload.cart\n            state.totle=action.payload.totleamout\n            state.loading = false\n        }\n        ,\n        [fetchCart.rejected]: (state, action) => {\n            state.error = action.error\n            state.loading = false\n        }\n    }\n})\nexport const { addToCart,changeProductQuantity,removeFromCart} = CartSlice.actions;\nexport default CartSlice.reducer;"]},"metadata":{},"sourceType":"module"}