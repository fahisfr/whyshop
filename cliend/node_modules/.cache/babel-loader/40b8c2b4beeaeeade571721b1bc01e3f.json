{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Axios from '../Axios';\nexport const fetchAlllOrder = createAsyncThunk('Order/fetchCart', async () => {\n  const response = await Axios.get('/admin/orders').then(res => res.data);\n  return response;\n});\nexport const AllOrderSlice = createSlice({\n  name: 'order',\n  initialState: {\n    OrdersInfo: []\n  },\n  reducers: {\n    addToCart: (state, action) => {}\n  },\n  extraReducers: {\n    [fetchOrder.fulfilled]: (state, action) => {\n      state.OrderInfo = action.payload.order;\n    }\n  }\n});\nexport default AllOrderSlice.reducer;","map":{"version":3,"sources":["/home/frboy/whyshop/cliend/src/Features/AllOrders.js"],"names":["createSlice","createAsyncThunk","Axios","fetchAlllOrder","response","get","then","res","data","AllOrderSlice","name","initialState","OrdersInfo","reducers","addToCart","state","action","extraReducers","fetchOrder","fulfilled","OrderInfo","payload","order","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAIA,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AAC1E,QAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAN,CAAU,eAAV,EAA2BC,IAA3B,CAAgCC,GAAG,IAAIA,GAAG,CAACC,IAA3C,CAAvB;AACA,SAAOJ,QAAP;AACH,CAH6C,CAAvC;AAIP,OAAO,MAAMK,aAAa,GAAGT,WAAW,CAAC;AACrCU,EAAAA,IAAI,EAAE,OAD+B;AAErCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE;AADF,GAFuB;AAKrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAC7B;AAFK,GAL2B;AASrCC,EAAAA,aAAa,EAAE;AACX,KAACC,UAAU,CAACC,SAAZ,GAAwB,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACK,SAAN,GAAkBJ,MAAM,CAACK,OAAP,CAAeC,KAAjC;AACH;AAHU;AATsB,CAAD,CAAjC;AAeP,eAAeb,aAAa,CAACc,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport Axios from '../Axios'\n\n\n\nexport const fetchAlllOrder = createAsyncThunk('Order/fetchCart', async () => {\n    const response = await Axios.get('/admin/orders').then(res => res.data)\n    return response\n})\nexport const AllOrderSlice = createSlice({\n    name: 'order',\n    initialState: {\n        OrdersInfo: [],\n    },\n    reducers: {\n        addToCart: (state, action) => {\n        }\n    },\n    extraReducers: {\n        [fetchOrder.fulfilled]: (state, action) => {\n            state.OrderInfo = action.payload.order\n        }\n    }\n})\nexport default AllOrderSlice.reducer;"]},"metadata":{},"sourceType":"module"}