{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://localhost:4000/';\nexport const ImagePath = imageId => `${baseURL}images/${imageId}.jpg`;\n_c = ImagePath;\nconst instance = axios.create({\n  baseURL: 'http://localhost:4000/api/',\n  headers: {\n    'authorization': localStorage.getItem('accesstoken')\n  }\n}); // instance.interceptors.response.use(\n//     response => response,\n//     async error => {\n//         if (error.response.status === 401 && error.response.data.message === 'token expired') {\n//             try {\n//                 localStorage.removeItem('accesstoken');\n//                 const { data } = await instance.post('/refreshtoken', { refreshtoken: localStorage.getItem('refreshtoken') });\n//                 localStorage.setItem('accesstoken', data.accesstoken);\n//             } catch (_error) {\n//                 return Promise.reject(error)\n//             }\n//         }\n//         return Promise.reject(error);\n//     }\n// );\n\nexport default instance;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePath\");","map":{"version":3,"sources":["/home/frboy/whyshop/cliend/src/Axios.js"],"names":["axios","baseURL","ImagePath","imageId","instance","create","headers","localStorage","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAc,GAAEF,OAAQ,UAASE,OAAQ,MAA3D;KAAMD,S;AAEb,MAAME,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC1BJ,EAAAA,OAAO,EAAE,4BADiB;AAE1BK,EAAAA,OAAO,EAAE;AAAE,qBAAiBC,YAAY,CAACC,OAAb,CAAqB,aAArB;AAAnB;AAFiB,CAAb,CAAjB,C,CAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,eAAeJ,QAAf","sourcesContent":["import axios from 'axios';\n\n\nconst baseURL = 'http://localhost:4000/';\n\nexport const ImagePath = (imageId) => `${baseURL}images/${imageId}.jpg`;\n\nconst instance = axios.create({\n    baseURL: 'http://localhost:4000/api/',\n    headers: { 'authorization': localStorage.getItem('accesstoken') }\n});\n// instance.interceptors.response.use(\n//     response => response,\n//     async error => {\n        \n//         if (error.response.status === 401 && error.response.data.message === 'token expired') {\n//             try {\n//                 localStorage.removeItem('accesstoken');\n//                 const { data } = await instance.post('/refreshtoken', { refreshtoken: localStorage.getItem('refreshtoken') });\n//                 localStorage.setItem('accesstoken', data.accesstoken);\n\n//             } catch (_error) {\n//                 return Promise.reject(error)\n//             }\n//         }\n//         return Promise.reject(error);\n//     }\n// );\n\n\n\nexport default instance"]},"metadata":{},"sourceType":"module"}